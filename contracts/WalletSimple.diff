49a50,54
>     // [Polyjuice compatibility]
>     bytes32 public constant EMPTY_LOCK_HASH = hex"00";
>     // [Polyjuice compatibility]
>     bytes32 public ethAccountLockCodeHash;
> 
65c70
<     function init(address[] calldata allowedSigners)
---
>     function init(address[] calldata allowedSigners, bytes32 code_hash)
76a82,84
> 
>         // [Polyjuice compatibility]
>         ethAccountLockCodeHash = code_hash;
127a136,140
>     // [Polyjuice compatibility]
>     function getCodeHash() public view returns (bytes32) {
>         return ethAccountLockCodeHash;
>     }
> 
369c382
<     ) public pure returns (address) {
---
>     ) public returns (address) {
377c390,395
<         return ecRecover(check, signature);
---
>         if (ethAccountLockCodeHash == EMPTY_LOCK_HASH) {
>             return ecRecover(check, signature);
>         }
> 
>         // [Polyjuice compatibility]
>         return polyRecover(check, signature, ethAccountLockCodeHash);
390a409,441
>     // [Polyjuice compatibility]
>     function polyRecover(
>         bytes32 message,
>         bytes memory signature,
>         bytes32 eth_account_lock_code_hash
>     ) public returns (address addr) {
>         if (int8(signature[64]) >= 27) {
>             signature[64] = bytes1(int8(signature[64]) - 27);
>         }
> 
>         bytes memory input = abi.encode(
>             message,
>             signature,
>             eth_account_lock_code_hash
>         );
>         bytes32[1] memory output;
>         assembly {
>             let len := mload(input)
>             if iszero(
>                 call(not(0), 0xf2, 0x0, add(input, 0x20), len, output, 288)
>             ) {
>                 revert(0x0, 0x0)
>             }
>         }
>         bytes32 script_hash = output[0];
>         require(
>             script_hash.length == 32,
>             "invalid recovered script hash length"
>         );
> 
>         return address(uint160(uint256(script_hash) >> 96));
>     }
> 
